# Product

Our web app is a tool to help Imperial students find out about events happening on campus.

Most people currently find out about events on campus through noticeboards and mailing lists. The problem with these is that there is no easy, centralised way of finding out what is happening on campus. A big problem with the noticeboards is that a lot of the posters are outdated, and often irrelevant. It is also difficult to find out which mailing lists to subscribe to to find interesting events. Additionally, the Imperial College home page and the Union website have event calendars. An 'Imperial Mobile' application exists, which pulls data from the Imperial and Union sites, but we found that very few people use this, as it is complicated and slow.

Our main aim is to bring all these disparate sources together and make a simple, 'one-stop' solution to find interesting events.

To achieve this, we identified three main requirements for the design of the app. The app should be:

  - Simple

    Users should immediately see relevant and interesting events. There should be no barrier of entry, such as registering or logging in, for most activities in the app.

  - Relevant

    There are many different kinds of events happening on campus. Many of these are interesting to only a small subset of the college population. Users should be able to focus on events that are relevant to their interests.

  - Up to date

    Advertising events on campus should be as easy as entering the event details once. Users should be able to stay up to date on the latest events without any effort.


# Tech

We chose to develop our application using CoffeeScript, a programming language with a clean and elegant syntax which compiles down to JavaScript. We realised that building a rich web application would involve writing a lot of client-side JavaScript code. JavaScript however has many quirks, many of which are nicely dealt with in CoffeeScript. As one of the team members already had considerable experience using CoffeeScript prior to the project, it was an obvious choice for the client-side application code.

On the client-side, we are using a popular JavaScript MVC library called Backbone. This library provides us with "hassle-free" model synchronisation with the server and useful ways of dealing with UI changes in our view code.

We chose Node.js as server-side platform. Node.js is currently massively growing in popularity, and there are many useful libraries and frameworks which allow us to focus on writing application-specific code rather than the "plumbing". Using Node.js also enabled us to develop both the front-end and back-end in CoffeeScript.

The Node.js server exists mainly to expose a REST interface to the client. We are using a library called Swagger, which lets us define our REST interface in the form of an "executable specification", greatly simplifying our server-side code.

